<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      padding-top: 2rem;
      padding-bottom: 2rem;
    }
    .card {
      margin-bottom: 1.5rem;
    }
    .status-indicator {
      width: 15px;
      height: 15px;
      border-radius: 50%;
      display: inline-block;
      margin-right: 5px;
    }
    .status-online {
      background-color: #28a745;
    }
    .status-offline {
      background-color: #dc3545;
    }
    .status-warning {
      background-color: #ffc107;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="row mb-4">
      <div class="col-12 text-center">
        <h1>Stato del Sistema</h1>
        <h3 class="text-muted">Monitoraggio e diagnostica</h3>
      </div>
    </div>

    <div class="row mb-3">
      <div class="col-12">
        <button id="refreshButton" class="btn btn-primary mb-3">
          <i class="bi bi-arrow-clockwise"></i> Aggiorna stato
        </button>
        <div id="lastUpdated" class="text-muted small"></div>
      </div>
    </div>

    <div class="row">
      <!-- Stato API -->
      <div class="col-md-6">
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <span>Stato API</span>
            <div>
              <span id="apiStatusIndicator" class="status-indicator"></span>
              <span id="apiStatusText">In attesa...</span>
            </div>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-sm">
                <tbody>
                  <tr>
                    <th>Versione</th>
                    <td id="apiVersion">-</td>
                  </tr>
                  <tr>
                    <th>Ambiente</th>
                    <td id="apiEnvironment">-</td>
                  </tr>
                  <tr>
                    <th>Timestamp</th>
                    <td id="apiTimestamp">-</td>
                  </tr>
                  <tr>
                    <th>Tempo di risposta</th>
                    <td id="apiResponseTime">-</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- Stato Database -->
      <div class="col-md-6">
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <span>Stato Database</span>
            <div>
              <span id="dbStatusIndicator" class="status-indicator"></span>
              <span id="dbStatusText">In attesa...</span>
            </div>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-sm">
                <tbody>
                  <tr>
                    <th>Stato connessione</th>
                    <td id="dbReadyState">-</td>
                  </tr>
                  <tr>
                    <th>Modalità offline</th>
                    <td id="dbOfflineMode">-</td>
                  </tr>
                  <tr>
                    <th>Tentativi di riconnessione</th>
                    <td id="dbReconnectAttempts">-</td>
                  </tr>
                  <tr>
                    <th>Tempo di risposta</th>
                    <td id="dbResponseTime">-</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Dettagli di sistema -->
    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-header">Dettagli di sistema</div>
          <div class="card-body">
            <div id="systemDetails">
              <p class="text-center">Caricamento dettagli di sistema...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Funzione per formattare il timestamp
      function formatDateTime(isoString) {
        if (!isoString) return '-';
        const date = new Date(isoString);
        return date.toLocaleString('it-IT');
      }

      // Funzione per aggiornare il timestamp dell'ultimo aggiornamento
      function updateLastUpdated() {
        const now = new Date();
        document.getElementById('lastUpdated').textContent = `Ultimo aggiornamento: ${now.toLocaleString('it-IT')}`;
      }

      // Funzione per formattare il tempo di risposta
      function formatResponseTime(ms) {
        return `${ms} ms`;
      }

      // Funzione per controllare lo stato dell'API
      async function checkAPIStatus() {
        const startTime = performance.now();
        try {
          const response = await fetch('/api/status');
          const data = await response.json();
          const responseTime = Math.round(performance.now() - startTime);

          // Aggiorna indicatore di stato
          const statusIndicator = document.getElementById('apiStatusIndicator');
          const statusText = document.getElementById('apiStatusText');
          
          if (data.status === 'success') {
            statusIndicator.className = 'status-indicator status-online';
            statusText.textContent = 'Online';
          } else {
            statusIndicator.className = 'status-indicator status-offline';
            statusText.textContent = 'Errore';
          }

          // Aggiorna informazioni API
          document.getElementById('apiVersion').textContent = data.version || '-';
          document.getElementById('apiEnvironment').textContent = data.environment || '-';
          document.getElementById('apiTimestamp').textContent = formatDateTime(data.timestamp);
          document.getElementById('apiResponseTime').textContent = formatResponseTime(responseTime);

          return {
            success: true,
            responseTime
          };
        } catch (error) {
          console.error('Errore nel controllare lo stato dell\'API:', error);
          document.getElementById('apiStatusIndicator').className = 'status-indicator status-offline';
          document.getElementById('apiStatusText').textContent = 'Offline';
          
          return {
            success: false,
            error
          };
        }
      }

      // Funzione per controllare lo stato del database
      async function checkDatabaseStatus() {
        const startTime = performance.now();
        try {
          const response = await fetch('/api/database/status');
          const data = await response.json();
          const responseTime = Math.round(performance.now() - startTime);

          // Aggiorna indicatore di stato
          const statusIndicator = document.getElementById('dbStatusIndicator');
          const statusText = document.getElementById('dbStatusText');
          
          // Usa connectionStatus come fonte primaria dello stato
          if (data.connectionStatus === 'offline') {
            statusIndicator.className = 'status-indicator status-warning';
            statusText.textContent = 'Modalità Offline';
          } else if (data.connectionStatus === 'connected') {
            statusIndicator.className = 'status-indicator status-online';
            statusText.textContent = 'Connesso';
          } else {
            statusIndicator.className = 'status-indicator status-offline';
            statusText.textContent = 'Disconnesso';
          }

          // Aggiorna informazioni database usando connectionStatus per stato della connessione
          document.getElementById('dbReadyState').textContent = `${data.connectionStatus || '-'} (${data.readyStateRaw || '?'})`;
          document.getElementById('dbOfflineMode').textContent = data.isOfflineMode ? 'Attiva' : 'Disattiva';
          document.getElementById('dbReconnectAttempts').textContent = data.reconnectAttempts || '0';
          document.getElementById('dbResponseTime').textContent = formatResponseTime(responseTime);
          
          // Aggiungi ulteriori dettagli nella console per debugging
          console.log('Stato database dettagliato:', {
            connectionStatus: data.connectionStatus,
            readyState: data.readyState,
            readyStateRaw: data.readyStateRaw,
            isOfflineMode: data.isOfflineMode,
            reconnectAttempts: data.reconnectAttempts
          });

          return {
            success: true,
            responseTime,
            data  // Includi i dati della risposta nel valore di ritorno
          };
        } catch (error) {
          console.error('Errore nel controllare lo stato del database:', error);
          document.getElementById('dbStatusIndicator').className = 'status-indicator status-offline';
          document.getElementById('dbStatusText').textContent = 'Offline';
          
          return {
            success: false,
            error
          };
        }
      }

      // Funzione per aggiornare tutti gli stati
      async function updateAllStatus() {
        updateLastUpdated();
        const apiStatus = await checkAPIStatus();
        const dbStatus = await checkDatabaseStatus();
        
        // Aggiorna i dettagli di sistema
        const systemDetails = document.getElementById('systemDetails');
        
        if (apiStatus.success) {
          let html = `
            <div class="row">
              <div class="col-md-6">
                <h5>Informazioni API</h5>
                <ul class="list-unstyled">
                  <li><strong>Status:</strong> ${apiStatus.success ? 'Online' : 'Offline'}</li>
                  <li><strong>Tempo di risposta:</strong> ${formatResponseTime(apiStatus.responseTime)}</li>
                </ul>
              </div>
              <div class="col-md-6">
                <h5>Informazioni Database</h5>
                <ul class="list-unstyled">
                  <li><strong>Status:</strong> ${
                    dbStatus.success ? 
                      (dbStatus.data?.connectionStatus === 'offline' ? 'Modalità Offline' : 
                       dbStatus.data?.connectionStatus === 'connected' ? 'Connesso' : 'Disconnesso') : 
                      'Non connesso'
                  }</li>
                  <li><strong>Tempo di risposta:</strong> ${dbStatus.success ? formatResponseTime(dbStatus.responseTime) : 'N/A'}</li>
                  ${dbStatus.success && dbStatus.data?.connectionStatus ? `<li><strong>Stato connessione:</strong> ${dbStatus.data.connectionStatus}</li>` : ''}
                  ${dbStatus.success && dbStatus.data?.reconnectAttempts > 0 ? `<li><strong>Tentativi riconnessione:</strong> ${dbStatus.data.reconnectAttempts}</li>` : ''}
                </ul>
              </div>
            </div>
            <hr>
            <p class="text-muted text-center">Il sistema è ${
              apiStatus.success && 
              (dbStatus.success && (dbStatus.data?.connectionStatus === 'connected' || dbStatus.data?.connectionStatus === 'offline')) ? 
              'completamente operativo' : 'parzialmente operativo'
            }.
            ${dbStatus.data && dbStatus.data?.connectionStatus === 'offline' ? 
              '<br><small class="text-warning">Funzionando in modalità offline (senza database).</small>' : 
              ''
            }</p>
          `;
          systemDetails.innerHTML = html;
        } else {
          systemDetails.innerHTML = `<p class="text-center text-danger">Impossibile recuperare i dettagli di sistema.</p>`;
        }
      }

      // Aggiungi listener per il pulsante di aggiornamento
      document.getElementById('refreshButton').addEventListener('click', function() {
        this.disabled = true;
        this.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Aggiornamento...`;
        
        updateAllStatus().then(() => {
          this.disabled = false;
          this.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Aggiorna stato';
        });
      });

      // Inizializza lo stato del sistema
      updateAllStatus();
    });
  </script>
</body>
</html>