<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      padding-top: 2rem;
      padding-bottom: 2rem;
    }
    .card {
      margin-bottom: 1.5rem;
    }
    .nav-tabs {
      margin-bottom: 1rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="row mb-4">
      <div class="col-12 text-center">
        <h1>Studio Biliato</h1>
        <h3 class="text-muted">Assistente AI per gestione clienti e documenti</h3>
      </div>
    </div>

    <ul class="nav nav-tabs" id="myTab" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="clients-tab" data-bs-toggle="tab" data-bs-target="#clients" type="button" role="tab" aria-controls="clients" aria-selected="true">Clienti</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="documents-tab" data-bs-toggle="tab" data-bs-target="#documents" type="button" role="tab" aria-controls="documents" aria-selected="false">Documenti</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="procedures-tab" data-bs-toggle="tab" data-bs-target="#procedures" type="button" role="tab" aria-controls="procedures" aria-selected="false">Procedure</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="assistant-tab" data-bs-toggle="tab" data-bs-target="#assistant" type="button" role="tab" aria-controls="assistant" aria-selected="false">Assistente AI</button>
      </li>
    </ul>

    <div class="tab-content" id="myTabContent">
      <!-- Clients Tab -->
      <div class="tab-pane fade show active" id="clients" role="tabpanel" aria-labelledby="clients-tab">
        <div class="row">
          <div class="col-md-4">
            <div class="card">
              <div class="card-header">
                Aggiungi nuovo cliente
              </div>
              <div class="card-body">
                <form id="addClientForm">
                  <div class="mb-3">
                    <label for="clientName" class="form-label">Nome / Ragione Sociale</label>
                    <input type="text" class="form-control" id="clientName" required>
                  </div>
                  <div class="mb-3">
                    <label for="fiscalCode" class="form-label">Codice Fiscale</label>
                    <input type="text" class="form-control" id="fiscalCode" required>
                  </div>
                  <div class="mb-3">
                    <label for="vatNumber" class="form-label">Partita IVA</label>
                    <input type="text" class="form-control" id="vatNumber">
                  </div>
                  <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="email" required>
                  </div>
                  <button type="submit" class="btn btn-primary">Salva</button>
                </form>
              </div>
            </div>
          </div>
          <div class="col-md-8">
            <div class="card">
              <div class="card-header">
                Clienti
              </div>
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table table-striped" id="clientsTable">
                    <thead>
                      <tr>
                        <th>Nome</th>
                        <th>Codice Fiscale</th>
                        <th>Email</th>
                        <th>Stato</th>
                        <th>Azioni</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td colspan="5" class="text-center">Nessun cliente trovato</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Documents Tab -->
      <div class="tab-pane fade" id="documents" role="tabpanel" aria-labelledby="documents-tab">
        <div class="row">
          <div class="col-md-4">
            <div class="card">
              <div class="card-header">
                Genera documento
              </div>
              <div class="card-body">
                <form id="generateDocumentForm">
                  <div class="mb-3">
                    <label for="documentClient" class="form-label">Cliente</label>
                    <select class="form-select" id="documentClient" required>
                      <option value="" selected disabled>Seleziona cliente</option>
                      <option value="mockClient">Rossi Mario (Demo)</option>
                    </select>
                  </div>
                  <div class="mb-3">
                    <label for="documentTemplate" class="form-label">Template</label>
                    <select class="form-select" id="documentTemplate" required>
                      <option value="" selected disabled>Seleziona template</option>
                      <option value="welcome-letter">Lettera di benvenuto</option>
                      <option value="pec-confirmation">Conferma PEC</option>
                      <option value="cost-estimate">Preventivo</option>
                      <option value="document-checklist">Checklist documenti</option>
                    </select>
                  </div>
                  <div class="mb-3">
                    <label for="documentFormat" class="form-label">Formato</label>
                    <select class="form-select" id="documentFormat">
                      <option value="pdf" selected>PDF</option>
                      <option value="docx">Word (DOCX)</option>
                      <option value="html">HTML</option>
                    </select>
                  </div>
                  
                  <!-- Dynamic fields for different document types -->
                  <div id="pecFields" style="display: none;">
                    <h5 class="mt-3">Dati PEC</h5>
                    <div class="mb-3">
                      <label for="pecAddress" class="form-label">Indirizzo PEC</label>
                      <input type="email" class="form-control" id="pecAddress">
                    </div>
                    <div class="mb-3">
                      <label for="pecProvider" class="form-label">Provider</label>
                      <input type="text" class="form-control" id="pecProvider" value="Aruba PEC S.p.A.">
                    </div>
                    <div class="mb-3">
                      <label for="pecActivationDate" class="form-label">Data attivazione</label>
                      <input type="date" class="form-control" id="pecActivationDate">
                    </div>
                  </div>
                  
                  <div id="estimateFields" style="display: none;">
                    <h5 class="mt-3">Dati preventivo</h5>
                    <div class="mb-3">
                      <label for="estimateNumber" class="form-label">Numero preventivo</label>
                      <input type="text" class="form-control" id="estimateNumber">
                    </div>
                    <div class="mb-3">
                      <label for="estimateValidDays" class="form-label">Validità (giorni)</label>
                      <input type="number" class="form-control" id="estimateValidDays" value="30">
                    </div>
                    <div id="servicesContainer">
                      <div class="service-item border p-2 mb-2">
                        <div class="mb-2">
                          <label class="form-label">Descrizione servizio</label>
                          <input type="text" class="form-control service-description">
                        </div>
                        <div class="row">
                          <div class="col">
                            <label class="form-label">Periodicità</label>
                            <select class="form-select service-frequency">
                              <option value="Mensile">Mensile</option>
                              <option value="Trimestrale">Trimestrale</option>
                              <option value="Annuale">Annuale</option>
                              <option value="Una tantum">Una tantum</option>
                            </select>
                          </div>
                          <div class="col">
                            <label class="form-label">Importo (€)</label>
                            <input type="number" class="form-control service-amount" min="0" step="0.01">
                          </div>
                        </div>
                      </div>
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-primary mt-2" id="addServiceBtn">
                      + Aggiungi servizio
                    </button>
                  </div>
                  
                  <div class="mt-3">
                    <button type="submit" class="btn btn-primary w-100">Genera documento</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
          <div class="col-md-8">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span>Documenti generati</span>
                <button class="btn btn-sm btn-success" id="generatePackageBtn">Genera pacchetto onboarding</button>
              </div>
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table table-striped" id="documentsTable">
                    <thead>
                      <tr>
                        <th>Nome documento</th>
                        <th>Cliente</th>
                        <th>Data</th>
                        <th>Formato</th>
                        <th>Azioni</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td colspan="5" class="text-center">Nessun documento generato</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Procedures Tab -->
      <div class="tab-pane fade" id="procedures" role="tabpanel" aria-labelledby="procedures-tab">
        <div class="row">
          <div class="col-12">
            <div class="card">
              <div class="card-header">
                Procedure
              </div>
              <div class="card-body">
                <p class="text-center">Funzionalità di gestione procedure in sviluppo.</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Assistant Tab -->
      <div class="tab-pane fade" id="assistant" role="tabpanel" aria-labelledby="assistant-tab">
        <div class="row">
          <div class="col-12">
            <div class="card">
              <div class="card-header">
                Assistente AI
              </div>
              <div class="card-body">
                <div class="mb-3">
                  <label for="assistantQuestion" class="form-label">Fai una domanda all'assistente</label>
                  <textarea class="form-control" id="assistantQuestion" rows="3" placeholder="Scrivi qui la tua domanda..."></textarea>
                </div>
                <button class="btn btn-primary" id="askAssistantBtn">Chiedi all'assistente</button>
                
                <div class="mt-4" id="assistantResponse" style="display: none;">
                  <h5>Risposta:</h5>
                  <div class="p-3 bg-light rounded" id="responseContent"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Document template selection logic
    document.getElementById('documentTemplate').addEventListener('change', function() {
      // Hide all dynamic fields
      document.getElementById('pecFields').style.display = 'none';
      document.getElementById('estimateFields').style.display = 'none';
      
      // Show relevant fields based on template
      const templateValue = this.value;
      if (templateValue === 'pec-confirmation') {
        document.getElementById('pecFields').style.display = 'block';
      } else if (templateValue === 'cost-estimate') {
        document.getElementById('estimateFields').style.display = 'block';
      }
    });
    
    // Add service button for cost estimates
    document.getElementById('addServiceBtn').addEventListener('click', function() {
      const servicesContainer = document.getElementById('servicesContainer');
      const serviceItem = document.createElement('div');
      serviceItem.className = 'service-item border p-2 mb-2';
      
      serviceItem.innerHTML = `
        <div class="d-flex justify-content-between mb-2">
          <label class="form-label">Descrizione servizio</label>
          <button type="button" class="btn btn-sm btn-outline-danger remove-service">×</button>
        </div>
        <div class="mb-2">
          <input type="text" class="form-control service-description">
        </div>
        <div class="row">
          <div class="col">
            <label class="form-label">Periodicità</label>
            <select class="form-select service-frequency">
              <option value="Mensile">Mensile</option>
              <option value="Trimestrale">Trimestrale</option>
              <option value="Annuale">Annuale</option>
              <option value="Una tantum">Una tantum</option>
            </select>
          </div>
          <div class="col">
            <label class="form-label">Importo (€)</label>
            <input type="number" class="form-control service-amount" min="0" step="0.01">
          </div>
        </div>
      `;
      
      servicesContainer.appendChild(serviceItem);
      
      // Add event listener to remove button
      serviceItem.querySelector('.remove-service').addEventListener('click', function() {
        serviceItem.remove();
      });
    });
    
    // Generate document form submission
    document.getElementById('generateDocumentForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Get form values
      const clientId = document.getElementById('documentClient').value;
      const templateName = document.getElementById('documentTemplate').value;
      const format = document.getElementById('documentFormat').value;
      
      let requestData = {
        clientId,
        templateName,
        format
      };
      
      // Add template-specific data
      if (templateName === 'pec-confirmation') {
        requestData.pecData = {
          address: document.getElementById('pecAddress').value,
          provider: document.getElementById('pecProvider').value,
          activationDate: document.getElementById('pecActivationDate').value,
          requestDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago
          expiryDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // 1 year from now
          space: '1 GB',
          webmailUrl: 'https://webmail.pec.it',
          credentialsSentMethod: 'SMS'
        };
      } else if (templateName === 'cost-estimate') {
        // Collect services data
        const services = [];
        document.querySelectorAll('.service-item').forEach(item => {
          const description = item.querySelector('.service-description').value;
          const frequency = item.querySelector('.service-frequency').value;
          const amount = parseFloat(item.querySelector('.service-amount').value);
          
          if (description && amount) {
            services.push({
              description,
              frequency,
              amount,
              annualTotal: frequency === 'Mensile' ? amount * 12 : 
                          frequency === 'Trimestrale' ? amount * 4 : amount
            });
          }
        });
        
        const totalAmount = services.reduce((total, service) => total + service.annualTotal, 0);
        
        requestData.serviceData = {
          services,
          totalAmount,
          estimateNumber: document.getElementById('estimateNumber').value || `EST-${Date.now()}`,
          estimateDate: new Date().toISOString(),
          validUntil: new Date(Date.now() + (parseInt(document.getElementById('estimateValidDays').value) || 30) * 24 * 60 * 60 * 1000).toISOString()
        };
      }
      
      // Show loading state
      const submitBtn = this.querySelector('button[type="submit"]');
      const originalBtnText = submitBtn.textContent;
      submitBtn.textContent = 'Generazione in corso...';
      submitBtn.disabled = true;
      
      // API call to generate document
      fetch('/api/documents/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      })
      .then(response => response.json())
      .then(data => {
        // Reset button
        submitBtn.textContent = originalBtnText;
        submitBtn.disabled = false;
        
        if (data.success) {
          // Add to documents table
          const documentsTable = document.getElementById('documentsTable');
          const tbody = documentsTable.querySelector('tbody');
          
          // Clear "no documents" message if present
          if (tbody.querySelector('td[colspan="5"]')) {
            tbody.innerHTML = '';
          }
          
          // Add new row
          const newRow = document.createElement('tr');
          newRow.innerHTML = `
            <td>${templateName}</td>
            <td>${clientId === 'mockClient' ? 'Rossi Mario' : clientId}</td>
            <td>${new Date().toLocaleDateString()}</td>
            <td>${format.toUpperCase()}</td>
            <td>
              <button class="btn btn-sm btn-outline-primary">Visualizza</button>
              <button class="btn btn-sm btn-outline-secondary">Scarica</button>
            </td>
          `;
          
          tbody.appendChild(newRow);
          
          // Show success message
          alert(`Documento ${templateName} generato con successo!`);
        } else {
          // Show error message
          alert(`Errore: ${data.error}`);
        }
      })
      .catch(error => {
        // Reset button
        submitBtn.textContent = originalBtnText;
        submitBtn.disabled = false;
        
        // Show error message
        alert(`Errore di connessione: ${error.message}`);
      });
    });
    
    // Ask assistant button
    document.getElementById('askAssistantBtn').addEventListener('click', function() {
      const question = document.getElementById('assistantQuestion').value.trim();
      
      if (!question) {
        alert('Inserisci una domanda');
        return;
      }
      
      // Show loading state
      this.textContent = 'Elaborazione...';
      this.disabled = true;
      
      // API call to assistant
      fetch('/api/assistant/ask', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ question })
      })
      .then(response => response.json())
      .then(data => {
        // Reset button
        this.textContent = 'Chiedi all\'assistente';
        this.disabled = false;
        
        // Show response
        const responseElement = document.getElementById('assistantResponse');
        const responseContent = document.getElementById('responseContent');
        
        responseElement.style.display = 'block';
        responseContent.innerHTML = `<p>${data.answer}</p>`;
      })
      .catch(error => {
        // Reset button
        this.textContent = 'Chiedi all\'assistente';
        this.disabled = false;
        
        // Show error message
        alert(`Errore di connessione: ${error.message}`);
      });
    });
    
    // Generate onboarding package button
    document.getElementById('generatePackageBtn').addEventListener('click', function() {
      const clientId = prompt('Inserisci l\'ID del cliente per il pacchetto di onboarding:');
      
      if (!clientId) {
        return;
      }
      
      // Show loading
      this.textContent = 'Generazione in corso...';
      this.disabled = true;
      
      // API call to generate package
      fetch('/api/documents/generate-onboarding', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          clientId,
          format: 'pdf'
        })
      })
      .then(response => response.json())
      .then(data => {
        // Reset button
        this.textContent = 'Genera pacchetto onboarding';
        this.disabled = false;
        
        if (data.success) {
          // Show success message
          alert('Pacchetto di onboarding generato con successo!');
        } else {
          // Show error message
          alert(`Errore: ${data.error}`);
        }
      })
      .catch(error => {
        // Reset button
        this.textContent = 'Genera pacchetto onboarding';
        this.disabled = false;
        
        // Show error message
        alert(`Errore di connessione: ${error.message}`);
      });
    });
  </script>
</body>
</html>